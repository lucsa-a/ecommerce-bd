-- Questao 1
CREATE OR REPLACE PROCEDURE AJUSTA_PRECO (P_COD_CATEGORIA CATEGORIA.CODIGO%TYPE)
IS
BEGIN
    UPDATE PRODUTO
    SET PRECO = PRECO + 50.0
    WHERE CODIGO_CATEGORIA = P_COD_CATEGORIA;

    COMMIT;
END;
/

-- Questao 2
CREATE OR REPLACE PROCEDURE AUMENTA_PONTOS_CLIENTE (
    P_COD_CLIENTE CLIENTE.CODIGO%TYPE,
    P_PONTOS CLIENTE.PONTOS%TYPE)
IS
    V_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT FROM CLIENTE WHERE CODIGO = P_COD_CLIENTE;

    IF V_COUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cliente não encontrado.');
    END IF;

    UPDATE CLIENTE
    SET PONTOS = PONTOS + P_PONTOS
    WHERE CODIGO = P_COD_CLIENTE;

    COMMIT;
END;
/

-- Questao 3
CREATE OR REPLACE VIEW LEVANTAMENTO_DE_COMPRAS_PAPELARIA AS
SELECT
    C.CODIGO,
    C.NOME AS CLIENTE,
    COUNT(*) AS QTD_COMPRAS
FROM
    ORDEM_DE_COMPRA OC
    JOIN COMPRA_POSSUI_PRODUTO CP ON OC.CODIGO = CP.CODIGO_COMPRA
    JOIN PRODUTO P ON CP.CODIGO_PRODUTO = P.CODIGO
    JOIN CATEGORIA CA ON CA.CODIGO = P.CODIGO_CATEGORIA
    JOIN CLIENTE C ON OC.CODIGO_CLIENTE = C.CODIGO
WHERE CA.NOME = 'Papelaria'
GROUP BY C.CODIGO, C.NOME;
/

-- Questao 4
CREATE OR REPLACE FUNCTION CALCULA_FRETE_CATEGORIA(P_COD_CATEGORIA CATEGORIA.CODIGO%TYPE)
RETURN ORDEM_DE_COMPRA.VALOR_FRETE%TYPE
IS VL_TOTAL_FRETE ORDEM_DE_COMPRA.VALOR_FRETE%TYPE;
BEGIN
    SELECT SUM(OC.VALOR_FRETE) INTO VL_TOTAL_FRETE
    FROM
        ORDEM_DE_COMPRA OC
        JOIN COMPRA_POSSUI_PRODUTO CP ON OC.CODIGO = CP.CODIGO_COMPRA
        JOIN PRODUTO P ON CP.CODIGO_PRODUTO = P.CODIGO
    WHERE P.CODIGO_CATEGORIA = P_COD_CATEGORIA;
 
    RETURN VL_TOTAL_FRETE;
END;
/

-- Questao 5
CREATE OR REPLACE TRIGGER ALTERA_NOME_TRANSPORTADORA
BEFORE INSERT OR UPDATE OF NOME ON TRANSPORTADORA
FOR EACH ROW
BEGIN
    :NEW.NOME := UPPER(SUBSTR(:NEW.NOME, 1, 1)) || SUBSTR(:NEW.NOME, 2);
END;
/

-- Questao 6
CREATE OR REPLACE TRIGGER VERIFICA_QUANTIDADE
BEFORE INSERT ON CARRINHO_TEM_PRODUTO
FOR EACH ROW
DECLARE
    QTD_ESTOQUE PROD_ESTOCADO_CENT_DIST.QUANTIDADE%TYPE;
BEGIN
    SELECT SUM(QUANTIDADE) INTO QTD_ESTOQUE
    FROM PROD_ESTOCADO_CENT_DIST
    WHERE CODIGO_PRODUTO = :NEW.CODIGO_PRODUTO;

    IF (:NEW.QUANTIDADE > QTD_ESTOQUE) THEN
        RAISE_APPLICATION_ERROR(-20000, 'Quantidade no carrinho excede a quantidade disponível.');
    END IF;
END;
/

-- Questao 7
CREATE OR REPLACE PROCEDURE REMOVE_FORNECIMENTO(
    P_COD_PRODUTO PRODUTO.CODIGO%TYPE,
    P_CEP_FORNCEDOR ENDERECO.CEP%TYPE)
IS
BEGIN
    DELETE FROM FORNECEDOR_FORNECE_PRODUTO FFP
    WHERE FFP.CODIGO_FORNECEDOR IN (
        SELECT F.CODIGO
        FROM FORNECEDOR F
        JOIN ENDERECO E ON F.CODIGO_ENDERECO = E.CODIGO
        WHERE E.CEP = P_CEP_FORNCEDOR
    )
    AND FFP.CODIGO_PRODUTO = P_COD_PRODUTO;

    COMMIT;
END;
/

-- Questao 8
CREATE OR REPLACE FUNCTION GET_TOTAL_PROD_COMPRADOS(DATA ORDEM_DE_COMPRA.DATA_COMPRA%TYPE)
RETURN PRODUTO.PRECO%TYPE
IS TOTAL_PROD_COMPRADOS PRODUTO.PRECO%TYPE;
BEGIN
    SELECT SUM(P.PRECO) INTO TOTAL_PROD_COMPRADOS
    FROM
        ORDEM_DE_COMPRA OC
        JOIN COMPRA_POSSUI_PRODUTO CP ON OC.CODIGO = CP.CODIGO_COMPRA
        JOIN PRODUTO P ON CP.CODIGO_PRODUTO = P.CODIGO
    WHERE TRUNC(OC.DATA_COMPRA) <= TRUNC(DATA);

    RETURN TOTAL_PROD_COMPRADOS;
END;
/

-- Questao 9
CREATE OR REPLACE TRIGGER REDUZ_ESTOQUE_PRODUTO
AFTER INSERT ON COMPRA_POSSUI_PRODUTO
FOR EACH ROW
BEGIN
    UPDATE PROD_ESTOCADO_CENT_DIST
    SET QUANTIDADE = QUANTIDADE - :NEW.QUANTIDADE
    WHERE CODIGO_PRODUTO = :NEW.CODIGO_PRODUTO;
END;
/

-- Questao 10
CREATE OR REPLACE VIEW INFORMA_PRODUTO AS
SELECT P.CODIGO, P.NOME, P.PRECO, AVG(CAP.NOTA) AS MEDIA_AVALIACOES
FROM
    PRODUTO P
    JOIN COMPRA_AVALIA_PRODUTO CAP ON P.CODIGO = CAP.CODIGO_PRODUTO
GROUP BY P.CODIGO, P.NOME, P.PRECO;
/
